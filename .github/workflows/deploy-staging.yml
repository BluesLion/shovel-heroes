name: Deploy to Staging (EKS)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-east-2
  EKS_CLUSTER_NAME: eks-shovel-heros
  ECR_BACKEND_REPO: shovel-heros-staging-shovel-heroes-backend
  ECR_FRONTEND_REPO: shovel-heros-staging-shovel-heroes-frontend

permissions:
  id-token: write  # Required for OIDC
  contents: read

jobs:
  deploy-staging:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -f Dockerfile.backend \
            -t $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_BACKEND_REPO:staging-latest \
            .
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:staging-latest

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -f Dockerfile.frontend \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:staging-latest \
            .
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:staging-latest

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to staging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Update kustomization with actual ECR URLs and image tag
          cd k8s/overlays/staging

          # Replace placeholders with actual values
          kustomize edit set image \
            BACKEND_ECR_URL=$ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG \
            FRONTEND_ECR_URL=$ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG

          # Apply the manifests
          kustomize build . | kubectl apply -f -

          # Wait for rollout to complete
          kubectl rollout status deployment/backend-staging -n shovel-heroes-staging --timeout=5m
          kubectl rollout status deployment/frontend-staging -n shovel-heroes-staging --timeout=5m

      - name: Verify deployment
        run: |
          echo "=== Deployment Status ==="
          kubectl get deployments -n shovel-heroes-staging
          kubectl get pods -n shovel-heroes-staging
          kubectl get services -n shovel-heroes-staging
          kubectl get ingress -n shovel-heroes-staging

      - name: Run health checks
        run: |
          echo "=== Health Checks ==="
          kubectl exec -n shovel-heroes-staging deployment/backend-staging -- wget -qO- http://localhost:8787/healthz || echo "Backend health check failed"
          kubectl exec -n shovel-heroes-staging deployment/frontend-staging -- wget -qO- http://localhost:80/health || echo "Frontend health check failed"
